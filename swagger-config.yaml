openapi: 3.0.0
info:
  title: Sample API
  description: Test project for monstar-lab
  version: 0.1.0
  
#servers:
#  - url: http://api.example.com/v1
#    description: Optional server description, e.g. Main (production) server
#  - url: http://staging-api.example.com
#    description: Optional server description, e.g. Internal staging server for testing
tags:
  - name: Authentication 
    description: authentication-related endpoints
  - name: Users 
    description: /users/* endpoints
  - name: Movies
    description: /movies/* endpoints
  - name: Favorites
    description: /favorites/* endpoints
paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Authenticate the user
      description: User has to be already created
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh the token
      description: Needs existing tokens 
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Refresh-token'
      responses:
        '201':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
        '401':
          description: Unauthorized 
        
  /users:
    get:
      tags:
        - Users
      summary: Return a list of users
      description: Requires admin permission
      security: 
        - bearerAuth: []
      responses:
        '200':   
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized 
        '403':
          description: Forbidden
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Return information about selected user
      security: 
        - bearerAuth: []
      parameters:
        - $ref:  '#/components/parameters/userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized 
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    delete:
      tags:
        - Users
      summary: Delete a selected user
      description: Needs to be the same user or ADMIN
      security:
        - bearerAuth: []
      parameters:
        - $ref:  '#/components/parameters/userId'
      responses:
        '204':
          description: Successfully deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    put:
      tags:
        - Users 
      summary: Update the whole user
      description: Needs to be the same user or ADMIN, can't update permission
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    patch:
      tags:
        - Users
      summary: Update the user
      description: Needs to be the same user or ADMIN, can't update permission
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
  /users/{userId}/permissionFlags/{permissionFlags}:
    put:
      tags:
        - Users 
      summary: Update permissionFlags
      description: Needs to be ADMIN
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/permissionFlags'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'

  /movies:
    get:
      tags:
        - Movies
      summary: Return a list of movies
      description: Supports 'search' query parameter
      parameters:
        - in: query
          name: search
          schema: 
            type: string
          description: string to search inside names or descriptions of movies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieResponse'
    post:
      tags:
        - Movies 
      summary: Create a new movie 
      description: Requires editor permission
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized   
        '403':
          description: Forbidden
  /movies/{movieId}:
    get:
      tags:
        - Movies
      summary: Return information about selected movie
      parameters:
        - $ref:  '#/components/parameters/movieId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    delete:
      tags:
        - Movies
      summary: Delete a selected movie
      description: Requires editor permission
      security:
        - bearerAuth: []
      parameters:
        - $ref:  '#/components/parameters/movieId'
      responses:
        '204':
          description: Successfully deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    put:
      tags:
        - Movies 
      summary: Update the whole movie 
      description: Requires editor permission
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    patch:
      tags:
        - Movies 
      summary: Update the movie 
      description: Requires editor permission
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/movieId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'

  /favorites:
    get:
      tags:
        - Favorites
      summary: Return favorites of the current user
      description: Requires a valid JWT token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieResponse'
        '401':
          description: Unauthorized   
  /favorites/{movieId}:
    post:
      tags:
        - Favorites
      summary: Favorite a selected movie for the current user
      description: Requires a valid JWT token
      security:
        - bearerAuth: []
      parameters:
        - $ref:  '#/components/parameters/movieId'
      responses:
        '204':
          description: Successfully added to favorites
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
    delete:
      tags:
        - Favorites
      summary: Delete a selected movie from the favorites of the current user
      description: Requires a valid JWT token
      security:
        - bearerAuth: []
      parameters:
        - $ref:  '#/components/parameters/movieId'
      responses:
        '204':
          description: Successfully deleted from favorites
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          
# Components
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  parameters:
    movieId:
      in: path
      name: movieId
      schema: 
        type: string
      required: true
      description: String ID of the movie
    userId:
      in: path
      name: userId
      schema: 
        type: string
      required: true
      description: String ID of the user
    permissionFlags:
      in: path
      name: permissionFlags
      schema:
        type: number
      required: true
      description: PermissionFlag of the user
  schemas:
    ErrorsResponse:
      title: ErrorResponse
      type: object
      properties:
        errors: 
          type: array
          items: 
            type: string
            description: Error message
    Login:
      title: Login
      type: object
      properties:
        email:
          type: string
          #description: users email
        password:
          type: string
          #description: users password
    Refresh-token:
      title: Refresh-token
      type: object
      properties:
        refreshToken:
          type: string
    Authentication: 
      title: Authentication Tokens
      type: object
      properties:
        accessToken:
          type: string
          #description: accessToken 
        refreshToken: 
          type: string
          #description: refreshToken
    UserCreate:
      title: User Create 
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    User: 
      title: User Model
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        permissionFlags:
          type: number
    UserResponse:
      title: User Response
      type: object
      properties:
        _id: 
          type: string
          #description: User _id
        email:
          type: string
          #description: users email
        permissionFlags:
          type: number
          #description: users permission level
        __v:
          type: number
          #description: mongoDB object version key
    Movie:
      title: Movie
      type: object
      properties:
        name:
          type: string
          example: Updated Movie Name
        description:
          type: string
          example: Updated Movie Description
    MovieResponse:
      title: Movie Response
      type: object
      properties:
        _id: 
          type: string
        name:
          type: string
        description:
          type: string